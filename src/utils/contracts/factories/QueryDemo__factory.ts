/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { QueryDemo, QueryDemoInterface } from "../QueryDemo";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wormhole",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "_myChainID",
        type: "uint16",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
    ],
    name: "getResponseDigest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
    ],
    name: "getResponseHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "wormhole",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "guardianIndex",
            type: "uint8",
          },
        ],
        internalType: "struct IWormhole.Signature[]",
        name: "signatures",
        type: "tuple[]",
      },
    ],
    name: "parseAndVerifyQueryResponse",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "version",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "senderChainId",
            type: "uint16",
          },
          {
            internalType: "bytes",
            name: "requestId",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "nonce",
            type: "uint32",
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "chainId",
                type: "uint16",
              },
              {
                internalType: "uint8",
                name: "queryType",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "request",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "response",
                type: "bytes",
              },
            ],
            internalType: "struct QueryResponse.ParsedPerChainQueryResponse[]",
            name: "responses",
            type: "tuple[]",
          },
        ],
        internalType: "struct QueryResponse.ParsedQueryResponse",
        name: "r",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "chainId",
            type: "uint16",
          },
          {
            internalType: "uint8",
            name: "queryType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "request",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "response",
            type: "bytes",
          },
        ],
        internalType: "struct QueryResponse.ParsedPerChainQueryResponse",
        name: "pcr",
        type: "tuple",
      },
    ],
    name: "parseEthCallQueryResponse",
    outputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "requestBlockId",
            type: "bytes",
          },
          {
            internalType: "uint64",
            name: "blockNum",
            type: "uint64",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "blockTime",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "address",
                name: "contractAddress",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "callData",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "result",
                type: "bytes",
              },
            ],
            internalType: "struct QueryResponse.EthCallData[]",
            name: "result",
            type: "tuple[]",
          },
        ],
        internalType: "struct QueryResponse.EthCallQueryResponse",
        name: "r",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "responsePrefix",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_wormhole",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "guardianIndex",
            type: "uint8",
          },
        ],
        internalType: "struct IWormhole.Signature[]",
        name: "signatures",
        type: "tuple[]",
      },
    ],
    name: "verifyQueryResponseSignatures",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "_chainID",
        type: "uint16",
      },
      {
        internalType: "address",
        name: "_contractAddress",
        type: "address",
      },
    ],
    name: "updateRegistration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getMyCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getState",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "chainID",
            type: "uint16",
          },
          {
            internalType: "address",
            name: "contractAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "counter",
            type: "uint256",
          },
          {
            internalType: "uint64",
            name: "blockNum",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "blockTime",
            type: "uint64",
          },
        ],
        internalType: "struct QueryDemo.ChainEntry[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "response",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "guardianIndex",
            type: "uint8",
          },
        ],
        internalType: "struct IWormhole.Signature[]",
        name: "signatures",
        type: "tuple[]",
      },
    ],
    name: "updateCounters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type QueryDemoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QueryDemoConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class QueryDemo__factory extends ContractFactory {
  constructor(...args: QueryDemoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    _wormhole: PromiseOrValue<string>,
    _myChainID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<QueryDemo> {
    return super.deploy(
      _owner,
      _wormhole,
      _myChainID,
      overrides || {},
    ) as Promise<QueryDemo>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    _wormhole: PromiseOrValue<string>,
    _myChainID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _owner,
      _wormhole,
      _myChainID,
      overrides || {},
    );
  }
  override attach(address: string): QueryDemo {
    return super.attach(address) as QueryDemo;
  }
  override connect(signer: Signer): QueryDemo__factory {
    return super.connect(signer) as QueryDemo__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QueryDemoInterface {
    return new utils.Interface(_abi) as QueryDemoInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): QueryDemo {
    return new Contract(address, _abi, signerOrProvider) as QueryDemo;
  }
}
