/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IWormhole {
  export type SignatureStruct = {
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    v: PromiseOrValue<BigNumberish>;
    guardianIndex: PromiseOrValue<BigNumberish>;
  };

  export type SignatureStructOutput = [string, string, number, number] & {
    r: string;
    s: string;
    v: number;
    guardianIndex: number;
  };
}

export declare namespace QueryResponse {
  export type ParsedPerChainQueryResponseStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    queryType: PromiseOrValue<BigNumberish>;
    request: PromiseOrValue<BytesLike>;
    response: PromiseOrValue<BytesLike>;
  };

  export type ParsedPerChainQueryResponseStructOutput = [
    number,
    number,
    string,
    string,
  ] & { chainId: number; queryType: number; request: string; response: string };

  export type ParsedQueryResponseStruct = {
    version: PromiseOrValue<BigNumberish>;
    senderChainId: PromiseOrValue<BigNumberish>;
    requestId: PromiseOrValue<BytesLike>;
    nonce: PromiseOrValue<BigNumberish>;
    responses: QueryResponse.ParsedPerChainQueryResponseStruct[];
  };

  export type ParsedQueryResponseStructOutput = [
    number,
    number,
    string,
    number,
    QueryResponse.ParsedPerChainQueryResponseStructOutput[],
  ] & {
    version: number;
    senderChainId: number;
    requestId: string;
    nonce: number;
    responses: QueryResponse.ParsedPerChainQueryResponseStructOutput[];
  };

  export type EthCallDataStruct = {
    contractAddress: PromiseOrValue<string>;
    callData: PromiseOrValue<BytesLike>;
    result: PromiseOrValue<BytesLike>;
  };

  export type EthCallDataStructOutput = [string, string, string] & {
    contractAddress: string;
    callData: string;
    result: string;
  };

  export type EthCallQueryResponseStruct = {
    requestBlockId: PromiseOrValue<BytesLike>;
    blockNum: PromiseOrValue<BigNumberish>;
    blockHash: PromiseOrValue<BytesLike>;
    blockTime: PromiseOrValue<BigNumberish>;
    result: QueryResponse.EthCallDataStruct[];
  };

  export type EthCallQueryResponseStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    QueryResponse.EthCallDataStructOutput[],
  ] & {
    requestBlockId: string;
    blockNum: BigNumber;
    blockHash: string;
    blockTime: BigNumber;
    result: QueryResponse.EthCallDataStructOutput[];
  };
}

export declare namespace QueryDemo {
  export type ChainEntryStruct = {
    chainID: PromiseOrValue<BigNumberish>;
    contractAddress: PromiseOrValue<string>;
    counter: PromiseOrValue<BigNumberish>;
    blockNum: PromiseOrValue<BigNumberish>;
    blockTime: PromiseOrValue<BigNumberish>;
  };

  export type ChainEntryStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    chainID: number;
    contractAddress: string;
    counter: BigNumber;
    blockNum: BigNumber;
    blockTime: BigNumber;
  };
}

export interface QueryDemoInterface extends utils.Interface {
  functions: {
    "getResponseDigest(bytes)": FunctionFragment;
    "getResponseHash(bytes)": FunctionFragment;
    "parseAndVerifyQueryResponse(address,bytes,(bytes32,bytes32,uint8,uint8)[])": FunctionFragment;
    "parseEthCallQueryResponse((uint16,uint8,bytes,bytes))": FunctionFragment;
    "responsePrefix()": FunctionFragment;
    "verifyQueryResponseSignatures(address,bytes,(bytes32,bytes32,uint8,uint8)[])": FunctionFragment;
    "updateRegistration(uint16,address)": FunctionFragment;
    "getMyCounter()": FunctionFragment;
    "getState()": FunctionFragment;
    "updateCounters(bytes,(bytes32,bytes32,uint8,uint8)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getResponseDigest"
      | "getResponseHash"
      | "parseAndVerifyQueryResponse"
      | "parseEthCallQueryResponse"
      | "responsePrefix"
      | "verifyQueryResponseSignatures"
      | "updateRegistration"
      | "getMyCounter"
      | "getState"
      | "updateCounters",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getResponseDigest",
    values: [PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: "getResponseHash",
    values: [PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: "parseAndVerifyQueryResponse",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IWormhole.SignatureStruct[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "parseEthCallQueryResponse",
    values: [QueryResponse.ParsedPerChainQueryResponseStruct],
  ): string;
  encodeFunctionData(
    functionFragment: "responsePrefix",
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: "verifyQueryResponseSignatures",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IWormhole.SignatureStruct[],
    ],
  ): string;
  encodeFunctionData(
    functionFragment: "updateRegistration",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: "getMyCounter",
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCounters",
    values: [PromiseOrValue<BytesLike>, IWormhole.SignatureStruct[]],
  ): string;

  decodeFunctionResult(
    functionFragment: "getResponseDigest",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResponseHash",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseAndVerifyQueryResponse",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseEthCallQueryResponse",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "responsePrefix",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyQueryResponseSignatures",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRegistration",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyCounter",
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCounters",
    data: BytesLike,
  ): Result;

  events: {};
}

export interface QueryDemo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QueryDemoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * getResponseDigest computes the digest of the specified query response.
     */
    getResponseDigest(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    /**
     * getResponseHash computes the hash of the specified query response.
     */
    getResponseHash(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    parseAndVerifyQueryResponse(
      wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides,
    ): Promise<
      [QueryResponse.ParsedQueryResponseStructOutput] & {
        r: QueryResponse.ParsedQueryResponseStructOutput;
      }
    >;

    parseEthCallQueryResponse(
      pcr: QueryResponse.ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides,
    ): Promise<
      [QueryResponse.EthCallQueryResponseStructOutput] & {
        r: QueryResponse.EthCallQueryResponseStructOutput;
      }
    >;

    responsePrefix(overrides?: CallOverrides): Promise<[string]>;

    verifyQueryResponseSignatures(
      _wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides,
    ): Promise<[void]>;

    updateRegistration(
      _chainID: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getMyCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getState(
      overrides?: CallOverrides,
    ): Promise<[QueryDemo.ChainEntryStructOutput[]]>;

    updateCounters(
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * getResponseDigest computes the digest of the specified query response.
   */
  getResponseDigest(
    response: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>;

  /**
   * getResponseHash computes the hash of the specified query response.
   */
  getResponseHash(
    response: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides,
  ): Promise<string>;

  parseAndVerifyQueryResponse(
    wormhole: PromiseOrValue<string>,
    response: PromiseOrValue<BytesLike>,
    signatures: IWormhole.SignatureStruct[],
    overrides?: CallOverrides,
  ): Promise<QueryResponse.ParsedQueryResponseStructOutput>;

  parseEthCallQueryResponse(
    pcr: QueryResponse.ParsedPerChainQueryResponseStruct,
    overrides?: CallOverrides,
  ): Promise<QueryResponse.EthCallQueryResponseStructOutput>;

  responsePrefix(overrides?: CallOverrides): Promise<string>;

  verifyQueryResponseSignatures(
    _wormhole: PromiseOrValue<string>,
    response: PromiseOrValue<BytesLike>,
    signatures: IWormhole.SignatureStruct[],
    overrides?: CallOverrides,
  ): Promise<void>;

  updateRegistration(
    _chainID: PromiseOrValue<BigNumberish>,
    _contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getMyCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getState(
    overrides?: CallOverrides,
  ): Promise<QueryDemo.ChainEntryStructOutput[]>;

  updateCounters(
    response: PromiseOrValue<BytesLike>,
    signatures: IWormhole.SignatureStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * getResponseDigest computes the digest of the specified query response.
     */
    getResponseDigest(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * getResponseHash computes the hash of the specified query response.
     */
    getResponseHash(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<string>;

    parseAndVerifyQueryResponse(
      wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides,
    ): Promise<QueryResponse.ParsedQueryResponseStructOutput>;

    parseEthCallQueryResponse(
      pcr: QueryResponse.ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides,
    ): Promise<QueryResponse.EthCallQueryResponseStructOutput>;

    responsePrefix(overrides?: CallOverrides): Promise<string>;

    verifyQueryResponseSignatures(
      _wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;

    updateRegistration(
      _chainID: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    getMyCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getState(
      overrides?: CallOverrides,
    ): Promise<QueryDemo.ChainEntryStructOutput[]>;

    updateCounters(
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * getResponseDigest computes the digest of the specified query response.
     */
    getResponseDigest(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * getResponseHash computes the hash of the specified query response.
     */
    getResponseHash(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    parseAndVerifyQueryResponse(
      wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    parseEthCallQueryResponse(
      pcr: QueryResponse.ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    responsePrefix(overrides?: CallOverrides): Promise<BigNumber>;

    verifyQueryResponseSignatures(
      _wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    updateRegistration(
      _chainID: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getMyCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    updateCounters(
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * getResponseDigest computes the digest of the specified query response.
     */
    getResponseDigest(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * getResponseHash computes the hash of the specified query response.
     */
    getResponseHash(
      response: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    parseAndVerifyQueryResponse(
      wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    parseEthCallQueryResponse(
      pcr: QueryResponse.ParsedPerChainQueryResponseStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    responsePrefix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyQueryResponseSignatures(
      _wormhole: PromiseOrValue<string>,
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    updateRegistration(
      _chainID: PromiseOrValue<BigNumberish>,
      _contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getMyCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateCounters(
      response: PromiseOrValue<BytesLike>,
      signatures: IWormhole.SignatureStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
